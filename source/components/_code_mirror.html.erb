<script type="text/ruby">

class CodeMirror < React::Component::Base
  param :code, type: String

  after_mount do
    @editor = `CodeMirror(document.getElementById("code"), {
      value: #{params.code},
      mode: "text/x-ruby",
      matchBrackets: true,
      lineNumbers: true,
      indentUnit: 2,
      theme: 'github'
    });`
    `#{@editor}.on('change', #{lambda {on_change} })`
    execute_code
  end

  render(DIV) do
    div.card {
      div.card_header { "Code" }
      div(id: 'code')
      div.card_header { "Output" }
      div.card_block(id: 'result')
    }
  end

  def on_change
    execute_code
  end

  def execute_code
    begin
      compiled_code = Opal::Compiler.new(`#{@editor}.getValue()`).compile
      `ReactDOM.unmountComponentAtNode(document.getElementById("result"));`
      `eval(#{compiled_code})`
      if React.render_to_static_markup( ExampleComponent() ).empty?
        invalid_component_message
      else
        Element['#result'].render{ ExampleComponent() }
      end
    rescue Exception => e
      @time_out = after(0.1) do
        unable_to_compile_message e
      end
    end
  end

  def invalid_component_message
    message = div.text_danger do
      h3.text_danger {"Oops, bad component..."}
      p { "Your component has been rejected by React. A valid Component must have a render macro and return just one HTML element." }
    end
    Element['#result'].render{ message }
  end

  def unable_to_compile_message e
    message = div.text_danger do
      h3.text_danger {"Unable to compile..."}
      p { e.message }
    end
    Element['#result'].render{ message }
  end

end

</script>
