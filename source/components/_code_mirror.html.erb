<script type="text/ruby">

class CodeMirror < React::Component::Base
  param :code, type: String
  param :heading, default: "Code"
  param :rows, type: Integer, default: 0

  before_mount do
    r=rand(2**256).to_s(36)[0..7]
    @div_code = "code_#{r}"
    @div_result = "result_#{r}"
  end

  after_mount do
    @editor = `CodeMirror(document.getElementById(#{@div_code}), {
      value: #{params.code},
      mode: 'text/x-ruby',
      matchBrackets: true,
      lineNumbers: true,
      indentUnit: 2,
      theme: 'github'
    });`
    `#{@editor}.on('change', #{lambda {on_change} })`
    `#{@editor}.setSize(null, #{@editor}.defaultTextHeight()*#{params.rows})` unless params.rows == 0
    execute_code
  end

  render(DIV) do
    div.card {
      div.card_header { params.heading }
      div(id: @div_code)
      div.card_header { 'Output' }
      div.card_block(id: @div_result)
    }
  end

  def on_change
    execute_code
  end

  def execute_code
    begin
      compiled_code = Opal::Compiler.new(`#{@editor}.getValue()`).compile
      `ReactDOM.unmountComponentAtNode(document.getElementById(#{@div_result}));`
      `eval(#{compiled_code})`
      if React.render_to_static_markup( ExampleComponent() ).empty?
        invalid_component_message
      else
        Element["##{@div_result}"].render{ ExampleComponent() }
      end
    rescue Exception => e
      @time_out = after(0.1) do
        unable_to_compile_message e.message
      end
    end
  end

  def invalid_component_message
    message = div.text_danger do
      h3.text_danger {"Oops, invalid Component..."}
      p { "Your Component has been rejected by React. A valid Component must have a render macro and return just one HTML element." }
    end
    Element["##{@div_result}"].render{ message }
  end

  def unable_to_compile_message reason
    message = div.text_danger do
      h3.text_danger {"Can't compile..."}
      p { reason }
    end
    Element["##{@div_result}"].render{ message }
  end

end

</script>
