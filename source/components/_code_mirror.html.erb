<script type="text/ruby">

class CodeMirror < React::Component::Base
  param :code, type: String
  define_state :error_message

  before_mount do
    state.error_message! ""
  end

  after_mount do
    @editor = `CodeMirror(document.getElementById("code"), {
      value: #{params.code},
      mode: "text/x-ruby",
      matchBrackets: true,
      lineNumbers: true,
      indentUnit: 2,
      theme: 'github'
    });`
    `#{@editor}.on('change', #{lambda {on_change} })`
    execute_code
  end

  render(DIV) do
    div.card {
      div(id: 'code')
      # p { state.error_message }
      div.card_block(id: 'result')
    }
  end

  def on_change
    state.error_message! ""
    execute_code
  end

  def execute_code
    begin
      compiled_code = Opal::Compiler.new(`#{@editor}.getValue()`).compile
      `ReactDOM.unmountComponentAtNode(document.getElementById("result"));`
      result = `eval(#{compiled_code})`
      if result == "render"
        Element['#result'].render{ ExampleComponent() }
      else
        message = div.text_danger do
          h3.text_danger {"Oops, bad component..."}
          p { "Your component has been rejected by React. A valid Component must have a render macro which returns just one HTML element." }
        end
        Element['#result'].render{ message }
      end
      rescue Exception => e
      @time_out = after(0.1) do
        # state.error_message! e.message
        message = div.text_danger do
          h3.text_danger {"Unable to compile..."}
          p { e.message }
        end
        Element['#result'].render{ message }
      end
    end
  end

end

class TestApp < React::Component::Base
  param :name
  before_mount { @timer = every(1) { force_update! } }
  render(DIV) do
    h1 {"The current time is #{Time.now}"}
    h2 { "here hello #{params.name}" }.on(:click) do
     alert "you clicked"
    end
  end
end

</script>
