---
title: A family of Gems
---

# Hyperloop Gems

The Hyperloop framework comprises of a family of gems which for the most part can be used independently (though some do depend on each other).

## Gems family and dependencies

<%= partial "docs/gems_table"%>


## Installation Gems

> See [Installation](/installation) for further installation options.


> <h5><div class="hyperlogoalone"><%= image_tag "HyperRails.png", width: '35'%></div>
<%= link_to 'hyper-rails', 'https://github.com/ruby-hyperloop/hyper-rails', :class => 'rails-red', :name => 'hyper-rails' %></h5>

> One step integration of **hyper-component**, **hyper-model** and **hyper-router** with Rails plus generators for Components and Routers.


> <h5><div class="hyperlogoalone"><%= image_tag "HyperloopExpress.png", width: '35'%></div>
<%= link_to 'Hyperloop Express', 'https://github.com/ruby-hyperloop/reactrb-express', :class => 'express-yellow', :name => 'hyperloop-express' %></h5>

> **hyper-component** for static sites, with no build process needed.


## Core Hyperloop Gems

> See [Docs](/docs/dsl_overview) for detailed information on how to use these gems or [Tutorials](/tutorials) for working examples.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperComponents.png", width: '35'%></div>
<%= link_to 'hyper-component', 'https://github.com/ruby-hyperloop/hyper-react', :class => 'component-blue', :name => 'hyper-component' %></h5>

> The **hyper-component** gem implements Hyperloop's **Components**.

 > **hyper-component** provides a Ruby DSL to Facebook's React. Much of the documentation on this site covers usage of this Gem.


> <h5><div class="hyperlogoalone"><%= image_tag "HyperStores.png", width: '35'%></div>
<%= link_to 'hyper-store', 'https://github.com/ruby-hyperloop/hyper-store', :class => 'store-green', :name => 'hyper-store' %></h5>

> The **hyper-store** gem implements Hyperloop's **Stores**.

> Stores hold application state. Stores are Ruby classes that keep the dynamic parts of the state in special state variables


> <h5><div class="hyperlogoalone"><%= image_tag "HyperModels.png", width: '35'%></div>
<%= link_to 'hyper-model', 'https://github.com/ruby-hyperloop/hyper-mesh', :class => 'model-orange', :name => 'hyper-model' %></h5>

> The **hyper-model** gem implements Hyperloop's **Models and Policies**. Providing Hyperloop Models as isomorphic ActiveRecord models. In addition your ActiveRecord models stay connected to your clients via push notifications


> <h5><div class="hyperlogoalone"><%= image_tag "HyperOperations.png", width: '35'%></div><%= link_to 'hyper-operation', 'https://github.com/ruby-hyperloop/hyper-operation', :class => 'operation-purple', :name => 'hyper-operation' %></h5>

> The **hyper-operation** gem implements Hyperloop's **Operations**.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperRouter.png", width: '35'%></div>
<%= link_to 'hyper-router', 'https://github.com/ruby-hyperloop/reactrb-router/tree/v2-4-0', :class => 'router-blue', :name => 'hyper-router' %></h5>

> The **hyper-router** gem provides a Ruby DSL to Facebook's React Router which is a React component that loads other components depending on the current URL.

## Tools, Testing and Debugging Gems

> See [Tools and Debugging](/tools/) for further information.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperSpecs.png", width: '35'%></div>
<%= link_to 'hyper-spec', 'https://github.com/ruby-hyperloop/hyper-spec', :class => 'spec-red', :name => 'hyper-spec' %></h5>

> With **hyper-spec** you can run isomorphic specs for all your **Hyperloop** code using RSpec. Everything runs as standard RSpec test specs.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperTracer.png", width: '35'%></div>
<%= link_to 'hyper-trace', 'https://github.com/ruby-hyperloop/hyper-trace', :class => 'tracer-green', :name => 'hyper-trace' %></h5>

> Method tracing and conditional breakpoints for Opal Ruby.

> ##### [Opal Hot Reloader](https://github.com/fkchang/opal-hot-reloader)

> For pure programmer joy, no more page refreshes.

> ##### [Opal Console](https://github.com/fkchang/opal-console)

> Opal in your browser. Great for testing.
